# Running LMM in Julia

You can weave this document as html or pdf:
```{julia; eval=false}
using Weave
weave("day1_3mixedmodels.jmd")        # for an html output
weave("day1_3mixedmodels.jmd",
      doctype="pandoc2pdf", fig_ext=".pdf")  # for a pdf output
```

Setting up the project:
```julia
using DrWatson
@quickactivate
using DataFrames, JellyMe4, MixedModels, RCall
```

## Data from a study on sleep deprivation

Belenky et al. (2003) conducted an experiment to measure the 
effect of sleep deprivation on cognitive performance.
There were 18 subjects, chosen from the population of interest
(long-distance truck drivers), in the 10 day trial. These subjects were  restricted to 3 hours sleep per night during the trial.

On each day of the trial each subject's reaction time was measured.
The reaction time shown here is the average of several measurements.

These data are *balanced* in that each subject is measured the same number of times and on the same occasions.

Load the data:

```julia
sleepstudy = DataFrame(MixedModels.dataset(:sleepstudy));
describe(sleepstudy)
```

and plot the data using the _lattice_ package in R

Load the `lattice` package in `R` and set the graphics device to SVG (scalable vector graphics).

```julia
R"""
require("ggplot2", quietly=TRUE)
require("lattice", quietly=TRUE)
require("lme4", quietly=TRUE)
""";
RCall.ijulia_setdevice(MIME("image/svg+xml"), width=6, height=3.5)
```

Transfer the Julia `DataFrame` to an R `data.frame` with the same name

```julia
@rput sleepstudy;
```

and produce the plot

```julia
R"""
xy <- xyplot(
    reaction ~ days | subj, sleepstudy, aspect = "xy",
    layout = c(9,2), type = c("g", "p", "r"),
    index.cond = function(x,y) coef(lm(y ~ x))[1],
    xlab = "Days of sleep deprivation",
    ylab = "Average reaction time (ms)"
)
"""
```

Suppose we wish to evaluate the coefficients of the within-subject regressions.
For each subject the `days` column is the `x` in the regression and the `reaction` column is the `y`.
We create the model matrix using `hcat` (horizontal concatenate), which is the Julia analogue of R's `cbind`.

```julia
let days = 0:9
    hcat(ones(length(days)), days)
end
```

and use the backslash operator to evaluate the coefficients.

Putting this together looks like

```julia
withinsubj = combine(groupby(sleepstudy, :subj)) do sdf
    days = sdf.days
    X = hcat(ones(length(days)), days)
    coefs = X \ sdf.reaction
    (intercept = first(coefs), slope = last(coefs), )
end
```

The advantage of using this formulation is that it is easy to extend the quantities being evaluated and returned.
Suppose we wish to return the sum of squared residuals in addition to the coefficient estimates.

```julia
withinsubj = combine(groupby(sleepstudy, :subj)) do sdf
    days, rt = sdf.days, sdf.reaction
    X = hcat(ones(length(days)), days)
    coefs = X \ rt
    dfr = length(days) - 2  # degrees of freedom for residuals
    ssr = sum(abs2, rt - X * coefs) # sum of squared residuals
    (intercept = first(coefs), slope = last(coefs),
    ssr = ssr, dfr = dfr, s = sqrt(ssr / dfr), )
end
```

```julia
describe(withinsubj)
```

In most cases a simple linear regression provides an adequate fit to the within-subject data. 
Patterns for some subjects (e.g. 350, 352 and 371) deviate from linearity but the deviations are neither widespread nor consistent in form.

There is considerable variation in the intercept (estimated reaction time without sleep deprivation) across subjects -- 200 ms. up to 300 ms. -- and in the slope (increase in reaction time per day of sleep deprivation) -- 0 ms./day up to 20 ms./day.
Also there is considerable variability in the quality of the fit as measured by `s`, the estimate of `Ïƒ`, which ranges from about 9 to over 60 ms.

## Fit a linear mixed-effects model

Begin with a linear mixed-effects model with fixed effects for intercept and slope (w.r.t. `days`) and by-subject random effects for intercept and slope.
By default the slope and intercept random effects are correlated within subject.

```julia
f1 =  @formula(reaction ~ 1 + days + (1+days|subj));
m1 = fit(MixedModel, f1, sleepstudy)
```

The random-effects "estimates" (technically, these are the conditional means of the random effects given the observed data) can be obtained as

```julia
ranefvals = DataFrame(only(raneftables(m1)))
```

To put these on the same scale as the by-subject regression coefficients we add in the fixed-effects estimates.

```julia
let fe = fixef(m1)
    ranefvals[2] .+= fe[1]
    ranefvals[3] .+= fe[2]
end;
describe(ranefvals)
```

and combine these values with the within-subject estimates

```julia
coefs = innerjoin(ranefvals, withinsubj, on = :subj);
@rput coefs
```

A scatter plot of the within-subject estimates versus the predictions from the mixed-effects model shows shrinkage toward the population mean.

```julia
RCall.ijulia_setdevice(MIME("image/svg+xml"), width=6, height=5)
R"""
p <- ggplot(coefs, aes(slope, intercept)) +
    geom_point(aes(color="Within")) +
    geom_text(aes(label=subj), vjust="outward") +
    geom_point(aes(days, `(Intercept)`, color="Mixed")) +
    geom_segment(aes(xend=days, yend=`(Intercept)`),
        arrow = arrow(length=unit(0.015, "npc"))) +
    xlab("Slope w.r.t. days (ms/day)") +
    ylab("Intercept (ms)")
"""
```

For reference, we show the original data plot again.

```julia
RCall.ijulia_setdevice(MIME("image/svg+xml"), width=6, height=3.5)
R"xy"
```

Our basic assumption is that the subjects are a random sample from the population of interest so it would make sense that they have some characteristics in common.
The value of the slope and intercept from the mixed-effects model for a particular subject is a compromise between the population values (i.e. the fixed effects estimates) and the within-subject estimate.

### Simplifying the random-effects structure

The estimate of the within-subject correlation of the random effects for slope and intercept is 0.08, indicating that it may be reasonable to model the random-effects as independent.
We can fit such a model as

```julia
f2 = @formula(reaction ~ 1 + days + zerocorr(1+days|subj));
m2 = fit(MixedModel, f2, sleepstudy)
```

Because model `m2` is nested within `m1`, which means that it is a special case of `m1`, we can use a likelihood ratio test to compare them.

```julia
MixedModels.likelihoodratiotest(m2, m1)
```

The large p-value indicates that `m1` is not a substantially better fit than `m2` so we adopt the simpler `m2`.
Also the values of AIC, BIC and AICc, where smaller is better, all prefer `m2`.

```julia
DataFrame(map(m -> (objective = objective(m), AIC = aic(m), AICc = aicc(m), BIC = bic(m)), [m2, m1]))
```

### Properties of `LinearMixedModel`

The model is saved as a `LinearMixedModel` object which has certain properties that we can extract using a '.' after the model's name.

```julia
typeof(m1)
propertynames(m1)
m1.formula
m1.objective
```

## Creating an lmer model from a `LinearMixedModel`

Phillip Alday has created the `JellyMe4` package to allow you to create an `lmer` model from a `LinearMixedModel`.
Because the `lme4` package stores a `model.frame` as part of a linear mixed-effects model object, a Tuple of the model and the data frame must be passed to R.
We can use the `$`-interpolation technique for inserting the value of objects in strings.

```julia
R"summary(m1 <- $(m1, sleepstudy))"
```

Reason to move the model to R: [`lme4` package](https://github.com/lme4/lme4) has many methods for producing plots and other diagnostics for an `lmerMod` object.

For example, the `dotplot` method for the `ranef.mer` class produces a comparative plot of prediction intervals on the random effects, in increasing order by the first component.

```julia
RCall.ijulia_setdevice(MIME("image/svg+xml"), width=6, height=4.5)
R"""
dotplot(ranef(m1),
    scales = list(x = list(relation = 'free')))[['subj']]
"""
```

An alternative is a `qqmath`, or normal-probability, plot.
For this plot the order of the groups is determined separately for each panel.

```julia
R"qqmath(ranef(m1))[['subj']]"
```